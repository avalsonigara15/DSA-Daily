class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
//    Brute force approach (TLE)
//    vector<int>ans1;
//    int i=0;
//    while(i<nums.size()-(k-1)){
//        int j=i+1;
//        int max=nums[i];
//        while(j<=(i+(k-1))){
//            if(max<nums[j]){
//                max=nums[j];
//            }
//            j++;
//        }
//        ans1.push_back(max);
//        i++;
//    }
//     return ans1;

    deque<int> dq;
    vector<int>ans;
    for(int i=0;i<nums.size();i++){
        if(!dq.empty() &&dq.front()==i-k){
            dq.pop_front();
        }
        while(!dq.empty() && nums[dq.back()]<nums[i]){
            dq.pop_back();
        }
        dq.push_back(i);
        if(i>=k-1){
            ans.push_back(nums[dq.front()]);
        }
    }
    return ans;
 }
    
};